// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eunicebjm/gc/internal/google/geocoder (interfaces: Client)

// Package googleClientMock is a generated GoMock package.
package googleClientMock

import (
	reflect "reflect"

	models "github.com/eunicebjm/gc/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GeocodeOne mocks base method.
func (m *MockClient) GeocodeOne(arg0 string) (models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeocodeOne", arg0)
	ret0, _ := ret[0].(models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeocodeOne indicates an expected call of GeocodeOne.
func (mr *MockClientMockRecorder) GeocodeOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeocodeOne", reflect.TypeOf((*MockClient)(nil).GeocodeOne), arg0)
}
